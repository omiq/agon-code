/*

make clean
make v=1

while in emulator
Right-Alt Q to quit
Right-Alt F to exit fullscreen

make v=1 && cd bin && agon dungeon.bin && cd ..

*/

#include <agon/vdp_vdu.h>
#include <agon/vdp_key.h>
#include <stdio.h>
#include <mos_api.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

// Array to hold screen characters rather than read back over the serial connection
char screen[20][40];


/* 
	Duplicate or similar to CONIO functions
*/

// Clear screen
void clrscr() {

	//vdp_mode(3); - Doesn't work, send the characters instead!
	char mode[2] = {22,3};
	mos_puts(mode,2,0);
	vdp_clear_screen();

	// Turning off flashing cursor
	putch(23); putch(1); putch(0);
}

// Get character from keyboard
int cgetc() {
	return inchar();
}

// Position cursor
void gotoxy(char x, char y) {

	vdp_cursor_tab(y,x);
}

// Put a character at screen coord
void cputcxy(int x, int y, char c) {

	vdp_cursor_tab(y,x);
	putch(c); putch(8);

}

/*

Program starts here

*/
int main(void)
{
	char k;
	int x, y, oldx, oldy;
	
	// Clear the screen and set the cursor off etc using our homebrew function
	clrscr();

	// Get the screen dimensions (result is actually incorrect)
	vdp_set_text_colour(2);

	// Do our "game" 
	vdp_set_text_colour(3);

	// Init the map as spaces
	for(int r=0; r<25; r++) {
		for (int c=0; c<40; c++) {
			screen[r][c]=32;
		}
	}	

	// Set start conditions
	k = 0;
	x = 10;
	y = 10;

	// Show the character in start position
	cputcxy(x,y,64);
	screen[y][x]=64;

	// Loop until the Esc key is pressed
	while (k!=27) {

		// Show player coordinates at top of screen
		gotoxy(0,0);
		printf("%2d %2d", x, y);


		// Backup the "player" location
		oldx = x;
		oldy = y;

		// Check the key pressed
		k = cgetc();
		switch (k)
		{
		case 'w':
			if(y>1) y--;
			break;
		case 's':
			if(y<25) y++;
			break;
		case 'a':
			if(x>0) x--;
			break;
		case 'd':
			if(x<40) x++;
			break;
		
		// Otherwise keep going
		default:
			break;
		}

		// Check if walking into an obstacle
		if(screen[y][x]==32)
		{	
			// Blank space baby
			cputcxy(x,y,64);
			screen[y][x]=64;
		}
		else
		{
			// Beep? vdp_bell();

			// Reverse the move 
			x = oldx;
			y = oldy;
		}

	}

	// Traditionally returning 0 means program worked
	// Non-zero would be an error code
	// Doesn't actually make any difference in our situation
	return 0;

}